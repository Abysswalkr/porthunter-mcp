name: CI

on:
  push:
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest

    env:
      PORT_HUNTER_TOKEN: CI_TOKEN
      PORT_HUNTER_ALLOWED_DIR: ${{ github.workspace }}
      PORT_HUNTER_REQUIRE_TOKEN: "true"
      PORT_HUNTER_MAX_PCAP_MB: "50"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (pkg + mcp client + scapy)
        run: |
          python -m pip install -U pip
          pip install . mcp scapy

      - name: Generate tiny PCAP (scapy)
        run: |
          python - << 'PY'
          from scapy.all import IP, TCP, Ether, wrpcap
          pkt = Ether()/IP(src="1.1.1.1", dst="2.2.2.2")/TCP(dport=80, flags="S")
          wrpcap("smoke.pcap", [pkt])
          print("smoke.pcap generated")
          PY

      - name: Smoke test via MCP STDIO
        run: |
          python - << 'PY'
          import os, sys, json, asyncio
          from typing import Any, Dict
          from mcp import StdioServerParameters
          from mcp.client.stdio import stdio_client
          from mcp.client.session import ClientSession

          TOKEN = os.environ["PORT_HUNTER_TOKEN"]

          def _mk_params():
            return StdioServerParameters(
              command=sys.executable,
              args=["-m", "porthunter.server"],
              env={
                "PORT_HUNTER_TOKEN": TOKEN,
                "PORT_HUNTER_ALLOWED_DIR": os.environ["PORT_HUNTER_ALLOWED_DIR"],
                "PORT_HUNTER_REQUIRE_TOKEN": os.getenv("PORT_HUNTER_REQUIRE_TOKEN","true"),
                "PORT_HUNTER_MAX_PCAP_MB": os.getenv("PORT_HUNTER_MAX_PCAP_MB","50"),
              },
            )

          def _content_to_dict(resp):
            sc = getattr(resp, "structuredContent", None)
            if sc:
              return sc.get("result", sc) if isinstance(sc, dict) else sc
            txt = "".join(getattr(c, "text", "") for c in getattr(resp, "content", []) if getattr(c, "type", "")=="text")
            return json.loads(txt) if txt else {}

          async def main():
            async with stdio_client(_mk_params()) as (r, w):
              async with ClientSession(r, w) as s:
                await s.initialize()

                d = _content_to_dict(await s.call_tool("get_info", {"auth_token": TOKEN}))
                assert d.get("ok") is True, f"get_info: {d}"

                d = _content_to_dict(await s.call_tool("scan_overview", {"path":"smoke.pcap","auth_token": TOKEN}))
                assert d.get("ok") is True, f"scan_overview: {d}"

                d = _content_to_dict(await s.call_tool("enrich_ip", {"ip":"999.999.1.1","auth_token": TOKEN}))
                assert d.get("ok") is False and d.get("error")=="invalid_ip", f"enrich_ip: {d}"

                d = _content_to_dict(await s.call_tool("correlate", {"ips":["abc","192.168.0.10","8.8.8.8"],"auth_token": TOKEN}))
                assert d.get("ok") is True, f"correlate: {d}"

          asyncio.run(main())
          print("SMOKE OK")
          PY
